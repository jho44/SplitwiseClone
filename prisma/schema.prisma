// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              String          @id @default(cuid())
  name            String
  email           String          @unique
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  updatedAt       DateTime        @updatedAt @map(name: "updated_at")
  friends         User[]          @relation("friends")
  friendOf        User[]          @relation("friends")
  blocked         User[]          @relation("blocked")
  blockedBy       User[]          @relation("blocked")
  groups          Group[]
  createdExpenses Expense[]       @relation("createdExpenses")
  partOfExpenses  ExpenseDetail[] @relation("partOfExpenses")

  @@map(name: "users")
}

model Group {
  id         String    @id @default(cuid())
  name       String
  members    User[]
  whiteboard String?
  expenses   Expense[]
}

model InvitedUser {
  id                String          @id @default(cuid())
  email             String          @unique
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @updatedAt @map(name: "updated_at")
  invitedToExpenses ExpenseDetail[] @relation("invitedExpenses")

  @@map(name: "invitedUsers")
}

// amt owed and paid by each member involved in some expense
model ExpenseDetail {
  id     String  @id @default(cuid())
  user   User?   @relation("partOfExpenses", fields: [userId], references: [id])
  userId String? @map(name: "user_id")

  invitedUser   InvitedUser? @relation("invitedExpenses", fields: [invitedUserId], references: [id])
  invitedUserId String?      @map(name: "invited_user_id")

  amtPaid Decimal
  amtOwed Decimal

  parentExpense Expense @relation("expenseDetails", fields: [parentExpenseId], references: [id])
  parentExpenseId String    @map(name: "parent_expense_id")
}

model Expense {
  id             String          @id @default(cuid())
  expenseDetails ExpenseDetail[] @relation("expenseDetails")

  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")
  expenseDate DateTime? @map(name: "expense_date")
  notes       String?

  creator   User   @relation("createdExpenses", fields: [creatorId], references: [id])
  creatorId String

  description String

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String? @map(name: "group_id")

  @@map(name: "expenses")
}
